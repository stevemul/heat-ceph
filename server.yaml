heat_template_version: 2016-04-08

parameters:
  flavor:
    type: string
    description: Flavor for the server to be created
    constraints:
      - custom_constraint: nova.flavor
  image:
    type: string
    description: Image ID or image name to use for the server
    constraints:
      - custom_constraint: glance.image
  key_name:
    type: string
    description: SSH Key Pair
    constraints:
      - custom_constraint: nova.keypair
  server_name:
    type: string
    description: Name of the server
  networks:
    type: json
  test:
    type: string

resources:
  server:
    type: OS::Nova::Server
    properties:
      name: { get_param: server_name }
      flavor: { get_param: flavor}
      image: { get_param: image }
      key_name: { get_param: key_name }
      networks: { get_param: networks }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_attr: [config_agent, config] }

  config_agent:
    type: collect-config-setup/install_config_agent_rhel7_yum.yaml

  server_ansible_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      config: 
        str_replace:
          template: { get_file: 'files/server-ansible.yaml' }
          params:
            _ipaddr_: { get_attr: [server, addresses, {  get_param: [ networks, 1, network ] }, 0, addr ] }
      outputs:
      - name: result

  deploy_ansible_config:
    type: OS::Heat::SoftwareDeployment
    depends_on: server
    properties:
      signal_transport: CFN_SIGNAL
      config:
        get_resource: server_ansible_config
      server:
        get_resource: server

outputs:
  server_ip:
    value: { get_attr: [  server, first_address ] }